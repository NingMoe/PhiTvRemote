package com.phicomm.remotecontrol.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.phicomm.remotecontrol.greendao.Entity.RemoteDevice;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "REMOTE_DEVICE".
 */
public class RemoteDeviceDao extends AbstractDao<RemoteDevice, Long> {

    public static final String TABLENAME = "REMOTE_DEVICE";

    /**
     * Properties of entity RemoteDevice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Port = new Property(3, int.class, "port", false, "PORT");
        public final static Property Bssid = new Property(4, String.class, "bssid", false, "BSSID");
        public final static Property Time = new Property(5, long.class, "time", false, "TIME");
    }

    ;


    public RemoteDeviceDao(DaoConfig config) {
        super(config);
    }

    public RemoteDeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMOTE_DEVICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ADDRESS\" TEXT," + // 2: address
                "\"PORT\" INTEGER NOT NULL ," + // 3: port
                "\"BSSID\" TEXT," + // 4: bssid
                "\"TIME\" INTEGER NOT NULL );"); // 5: time
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMOTE_DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RemoteDevice entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
        stmt.bindLong(4, entity.getPort());

        String bssid = entity.getBssid();
        if (bssid != null) {
            stmt.bindString(5, bssid);
        }
        stmt.bindLong(6, entity.getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RemoteDevice entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
        stmt.bindLong(4, entity.getPort());

        String bssid = entity.getBssid();
        if (bssid != null) {
            stmt.bindString(5, bssid);
        }
        stmt.bindLong(6, entity.getTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public RemoteDevice readEntity(Cursor cursor, int offset) {
        RemoteDevice entity = new RemoteDevice( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
                cursor.getInt(offset + 3), // port
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bssid
                cursor.getLong(offset + 5) // time
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, RemoteDevice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPort(cursor.getInt(offset + 3));
        entity.setBssid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.getLong(offset + 5));
    }

    @Override
    protected final Long updateKeyAfterInsert(RemoteDevice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(RemoteDevice entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
